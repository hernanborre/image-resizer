openapi: 3.0.0
info:
  title: Image Processing API
  version: 1.0.0
  description: API for managing image processing tasks

servers:
  - url: http://localhost:3001
    description: Development server

paths:
  /tasks:
    post:
      summary: Create a new image processing task
      operationId: createTask
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to be processed
      responses:
        '201':
          description: Task created and image processed successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - taskId
                  - price
                  - status
                  - inputLocalOriginalImage
                  - images
                properties:
                  message:
                    type: string
                    example: "Image processed successfully"
                  taskId:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  price:
                    type: number
                    example: 25.5
                  status:
                    type: string
                    enum: [pending, completed, failed]
                    example: "completed"
                  inputLocalOriginalImage:
                    type: string
                    example: "/input/example.jpg"
                  images:
                    type: array
                    items:
                      type: object
                      required:
                        - resolution
                        - path
                      properties:
                        resolution:
                          type: string
                          enum: ["1024", "800"]
                          example: "1024"
                        path:
                          type: string
                          example: "/output/1024/f322b730b287da77e1c519c7ffef4fc2.jpg"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No image file uploaded"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error processing image"
                  error:
                    type: object
                    description: Error details

  /tasks/{taskId}:
    get:
      summary: Get task status and results
      operationId: getTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: ID of the task to retrieve
          example: "7f99e3ef-1d3a-49e4-ae20-962e3bc71e38"
      responses:
        '200':
          description: Task details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetails'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    TaskCreated:
      type: object
      required:
        - taskId
        - status
        - price
        - originalPath
        - createdAt
        - updatedAt
      properties:
        taskId:
          type: string
          example: "65d4a54b89c5e342b2c2c5f6"
        status:
          type: string
          enum: [pending]
          example: "pending"
        price:
          type: number
          format: float
          description: Randomly assigned price between 5 and 50
          example: 25.5
        originalPath:
          type: string
          example: "/input/image.jpg"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TaskDetails:
      type: object
      required:
        - taskId
        - status
        - price
        - originalPath
        - createdAt
        - updatedAt
      properties:
        taskId:
          type: string
          example: "65d4a54b89c5e342b2c2c5f6"
        status:
          type: string
          enum: [pending, completed, failed]
          example: "completed"
        price:
          type: number
          format: float
          example: 25.5
        originalPath:
          type: string
          example: "/input/image.jpg"
        images:
          type: array
          items:
            type: object
            required:
              - resolution
              - path
              - createdAt
              - updatedAt
            properties:
              resolution:
                type: string
                enum: ["1024", "800"]
                example: "1024"
              path:
                type: string
                example: "/output/image1/1024/f322b730b287da77e1c519c7ffef4fc2.jpg"
              createdAt:
                type: string
                format: date-time
              updatedAt:
                type: string
                format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Error:
      type: object
      required:
        - statusCode
        - message
        - code
      properties:
        statusCode:
          type: integer
          enum: [400, 404, 500]
          example: 400
        message:
          type: string
          example: "Validation failed"
        code:
          type: string
          enum: [NOT_FOUND, VALIDATION_ERROR, PROCESSING_ERROR]
          example: "VALIDATION_ERROR"
        details:
          type: object
          description: Additional error details (optional)